name: CI

# Build on every push and every pull request (which tests the merge commit).
on:
  pull_request:
  push:

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Run each build to completion, regardless of if any have failed
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-18.04
          - macOS-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: cache ghc installed by ghcup
        id: cache-ghc
        with:
          path: |
            ~/.ghcup/bin/ghc-8.10.3
            ~/.ghcup/ghc/8.10.3/bin/ghc
          key: ghcup-0_${{matrix.os}}
      # Cache each local package's ~/.stack-work for fast incremental builds in CI.
      - uses: actions/cache@v2
        name: cache .stack-work
        with:
          path: |
            .stack-work
            # Main cache key: commit hash. This should always result in a cache miss...
          key: stack-work-0_${{matrix.os}}-${{github.sha}}
          # ...but then fall back on the latest cache stored (on this branch)
          restore-keys: stack-work-0_${{matrix.os}}-
      # Install ghcup on Linux only, because apparently it's pre-installed on the macOS runners.
      - name: install ghcup (Linux)
        if: runner.os == 'Linux' && steps.cache-ghc.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          curl -L https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup > "$HOME/.local/bin/ghcup"
          chmod +x "$HOME/.local/bin/ghcup"
      # Install ghc 8.10.3 with ghcup
      - name: install ghc 8.10.3
        if: steps.cache-ghc.outputs.cache-hit != 'true'
        run: ghcup install ghc 8.10.3

      # Add ~/.ghcup/ghc/8.10.3/bin to path
      - name: add ghc to path
        run: echo "$HOME/.ghcup/ghc/8.10.3/bin" >> $GITHUB_PATH

      # Install stack by downloading the binary from GitHub. The installation process is different for Linux and macOS,
      # so this is split into two steps, only one of which will run on any particular build.
      - name: install stack (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-linux-x86_64.tar.gz | tar -xz
          echo "$HOME/stack-2.5.1-linux-x86_64/" >> $GITHUB_PATH
      - name: install stack (macOS)
        if: runner.os == 'macOS'
        run: |
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-osx-x86_64.tar.gz | tar -xz
          echo "$HOME/stack-2.5.1-osx-x86_64/" >> $GITHUB_PATH
      # One of the transcripts fails if the user's git name hasn't been set.
      - name: set git username
        run: git config --global user.name "GitHub Actions"

      - name: remove ~/.stack/setup-exe-cache on macOS
        if: runner.os == 'macOS'
        run: rm -rf ~/.stack/setup-exe-cache

      # Build deps, then build local code. Splitting it into two steps just allows us to see how much time each step
      # takes.
      - name: build dependencies
        run: stack --no-terminal --system-ghc build --fast --only-dependencies
      - name: build
        run: stack --no-terminal --system-ghc build --fast

      # Run each test suite (tests and transcripts) on each runtime
      - name: tests
        run: stack --no-terminal --system-ghc exec tests
      - name: tests (new runtime)
        run: stack --no-terminal --system-ghc exec tests -- --new-runtime
      - name: transcripts
        run: |
          stack --no-terminal --system-ghc exec transcripts
          git diff
          x=`git status --porcelain -uno` bash -c 'if [[ -n $x ]]; then echo "$x" && false; fi'
      - name: transcripts (new runtime)
        run: |
          stack --no-terminal --system-ghc exec transcripts -- --new-runtime
          git diff
          x=`git status --porcelain -uno` bash -c 'if [[ -n $x ]]; then echo "$x" && false; fi'
